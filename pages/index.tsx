import * as i from 'types';
import * as React from 'react';
import Head from 'next/head';
import useSWR from 'swr';

import { fetcher } from 'services';
import { useQueryParams } from 'hooks';
import { ProductsFilter, ProductsOverview } from 'modules/products';
import { Container, Pagination } from 'common/layout';
import { Button } from 'common/interaction';

const limit = 21;

const Home: React.FC<HomeProps> = ({
  getProducts, getCategories, total,
}) => {
  const { queryParams } = useQueryParams();
  const [page, setPage] = React.useState(1);

  const pages = Math.floor((total || 0) / limit);

  const variables = React.useMemo(() => ({
    offset: page === 1 ? 0 : (page + 1) * limit,
    limit,
    categories: queryParams?.categories,
  }), [page, queryParams]);

  const { data } = useSWR<{ getProducts: i.Product[] }>(
    [
      `query GetProducts($offset: Int!, $limit: Int!, $categories: [String]) {
        getProducts(offset: $offset, limit: $limit, categories: $categories) {
          name
          image
          categories
        }
      }`,
      variables,
    ],
    fetcher,
    {
      initialData: {
        getProducts,
      },
    },
  );

  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Pagination>
        {Array.from(new Array(pages).keys()).map((pageNumber) => {
          const current = pageNumber + 1;
          return (
            <Button
              key={`button_${pageNumber}`}
              onClick={() => setPage(current)}
              active={current === page}
            >
              {current}
            </Button>
          );
        })}
      </Pagination>

      <ProductsFilter categories={getCategories} />

      {data?.getProducts && (
        <ProductsOverview products={data.getProducts} />
      )}
    </Container>
  );
};

type HomeProps = {
  getProducts: i.Product[];
  getCategories: string[];
  total: number;
};

export const getServerSideProps = async () => {
  const data = await fetcher(
    `query GetProducts($offset: Int!, $limit: Int!) {
        getProducts(offset: $offset, limit: $limit) {
          name
          image
          categories
        }
        getCategories
        getTotalProducts
    }`,
    {
      offset: 0,
      limit,
    },
  );

  if (!data) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      getProducts: data.getProducts,
      getCategories: data.getCategories,
      total: data.getTotalProducts,
    },
  };
};

export default Home;
